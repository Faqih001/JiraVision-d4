"use client"

import { useState, useEffect } from "react"
import { X } from "lucide-react"
import { Button } from "@/components/ui/button"
import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogFooter } from "@/components/ui/dialog"
import { Input } from "@/components/ui/input"
import { Textarea } from "@/components/ui/textarea"
import { Label } from "@/components/ui/label"
import { Checkbox } from "@/components/ui/checkbox"
import { 
  Select, 
  SelectContent, 
  SelectItem, 
  SelectTrigger, 
  SelectValue 
} from "@/components/ui/select"
import { 
  Command, 
  CommandEmpty, 
  CommandGroup, 
  CommandInput, 
  CommandItem, 
  CommandList 
} from "@/components/ui/command"
import { Popover, PopoverContent, PopoverTrigger } from "@/components/ui/popover"
import { Avatar, AvatarFallback, AvatarImage } from "@/components/ui/avatar"
import { Switch } from "@/components/ui/switch"
import { ScrollArea } from "@/components/ui/scroll-area"
import { Badge } from "@/components/ui/badge"
import { CreateEventInput, eventColors } from "@/types/calendar"
import { toast } from "@/hooks/use-toast"

interface AddEventModalProps {
  isOpen: boolean
  onClose: () => void
  onAddEvent: (event: CreateEventInput) => void
  defaultDate?: Date
  isEditing?: boolean
  initialEvent?: CreateEventInput & { id?: number }
  teamMembers?: Array<{
    id: number;
    name: string;
    avatar: string | null;
  }>
}

const eventTypeOptions = [
  { value: "meeting", label: "Meeting" },
  { value: "sprint", label: "Sprint" },
  { value: "demo", label: "Demo" },
  { value: "retrospective", label: "Retrospective" },
  { value: "planning", label: "Planning" },
  { value: "workshop", label: "Workshop" },
  { value: "holiday", label: "Holiday" },
  { value: "other", label: "Other" }
]

export default function AddEventModal({
  isOpen,
  onClose,
  onAddEvent,
  defaultDate,
  isEditing = false,
  initialEvent,
  teamMembers = []
}: AddEventModalProps) {
  const [event, setEvent] = useState<CreateEventInput>({
    title: "",
    description: "",
    startTime: "",
    endTime: "",
    location: "",
    eventType: "meeting",
    isAllDay: false,
    color: "blue",
    attendees: []
  })
  const [attendeeDropdownOpen, setAttendeeDropdownOpen] = useState(false)

  // Initialize form with default date or initial event data when modal opens
  useEffect(() => {
    if (isOpen) {
      if (initialEvent) {
        setEvent({
          ...initialEvent,
          // Ensure dates are formatted correctly
          startTime: initialEvent.startTime,
          endTime: initialEvent.endTime
        })
      } else if (defaultDate) {
        const dateStr = defaultDate.toISOString().slice(0, 10)
        setEvent({
          title: "",
          description: "",
          // Set default times (9 AM to 10 AM on the selected date)
          startTime: `${dateStr}T09:00:00`,
          endTime: `${dateStr}T10:00:00`,
          location: "",
          eventType: "meeting",
          isAllDay: false,
          color: "blue",
          attendees: []
        })
      }
    }
  }, [isOpen, initialEvent, defaultDate])

  const handleChange = (field: keyof CreateEventInput, value: any) => {
    setEvent(prev => ({ ...prev, [field]: value }))
  }

  const handleSubmit = () => {
    // Basic validation
    if (!event.title.trim()) {
      toast({
        title: "Error",
        description: "Event title is required",
        variant: "destructive"
      })
      return
    }

    if (!event.startTime || !event.endTime) {
      toast({
        title: "Error",
        description: "Start and end times are required",
        variant: "destructive"
      })
      return
    }

    // Check if end time is after start time
    if (new Date(event.endTime) <= new Date(event.startTime)) {
      toast({
        title: "Error",
        description: "End time must be after start time",
        variant: "destructive"
      })
      return
    }

    onAddEvent(event)
    onClose()
  }

  return (
    <Dialog open={isOpen} onOpenChange={onClose}>
      <DialogContent className="max-w-[95vw] sm:max-w-md md:max-w-lg overflow-y-auto max-h-[90vh]" aria-describedby="event-form-description">
        <DialogHeader>
          <DialogTitle className="flex items-center justify-between">
            <span>{isEditing ? "Edit Event" : "Add New Event"}</span>
            <Button variant="ghost" size="icon" onClick={onClose} className="h-6 w-6">
              <X className="h-4 w-4" />
            </Button>
          </DialogTitle>
        </DialogHeader>

        <div className="grid gap-4 py-4" id="event-form-description">
          <div className="grid gap-2">
            <Label htmlFor="title">Title</Label>
            <Input
              id="title"
              placeholder="Event title"
              value={event.title}
              onChange={(e) => handleChange("title", e.target.value)}
              autoFocus
            />
          </div>

          <div className="grid gap-2">
            <Label htmlFor="description">Description</Label>
            <Textarea
              id="description"
              placeholder="Event description"
              value={event.description}
              onChange={(e) => handleChange("description", e.target.value)}
              rows={3}
            />
          </div>

          <div className="grid gap-2">
            <div className="flex items-center gap-2">
              <Label htmlFor="isAllDay">All day</Label>
              <Switch
                id="isAllDay"
                checked={event.isAllDay}
                onCheckedChange={(checked) => handleChange("isAllDay", checked)}
              />
            </div>
          </div>

          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
            <div className="grid gap-2">
              <Label htmlFor="startTime">Start Time</Label>
              <Input
                id="startTime"
                type={event.isAllDay ? "date" : "datetime-local"}
                value={event.isAllDay ? event.startTime.split("T")[0] : event.startTime}
                onChange={(e) => handleChange("startTime", e.target.value)}
              />
            </div>

            <div className="grid gap-2">
              <Label htmlFor="endTime">End Time</Label>
              <Input
                id="endTime"
                type={event.isAllDay ? "date" : "datetime-local"}
                value={event.isAllDay ? event.endTime.split("T")[0] : event.endTime}
                onChange={(e) => handleChange("endTime", e.target.value)}
              />
            </div>
          </div>

          <div className="grid gap-2">
            <Label htmlFor="location">Location</Label>
            <Input
              id="location"
              placeholder="Event location"
              value={event.location}
              onChange={(e) => handleChange("location", e.target.value)}
            />
          </div>

          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
            <div className="grid gap-2">
              <Label htmlFor="eventType">Event Type</Label>
              <Select
                value={event.eventType}
                onValueChange={(value) => handleChange("eventType", value)}
              >
                <SelectTrigger id="eventType">
                  <SelectValue placeholder="Select type" />
                </SelectTrigger>
                <SelectContent>
                  {eventTypeOptions.map((option) => (
                    <SelectItem key={option.value} value={option.value}>
                      {option.label}
                    </SelectItem>
                  ))}
                </SelectContent>
              </Select>
            </div>

            <div className="grid gap-2">
              <Label htmlFor="color">Color</Label>
              <Select
                value={event.color}
                onValueChange={(value) => handleChange("color", value)}
              >
                <SelectTrigger id="color">
                  <SelectValue placeholder="Select color" />
                </SelectTrigger>
                <SelectContent>
                  {Object.entries(eventColors).map(([color, classes]) => (
                    <SelectItem key={color} value={color}>
                      <div className="flex items-center gap-2">
                        <div className={`w-4 h-4 rounded-full ${classes.bgClass}`} />
                        <span className="capitalize">{color}</span>
                      </div>
                    </SelectItem>
                  ))}
                </SelectContent>
              </Select>
            </div>
          </div>

          {/* Attendees Selector */}
          {teamMembers.length > 0 && (
            <div className="grid gap-2">
              <Label htmlFor="attendees">Attendees</Label>
              <div className="flex flex-wrap gap-1 mb-2">
                {event.attendees?.map(attendeeId => {
                  const attendee = teamMembers.find(m => m.id === attendeeId)
                  if (!attendee) return null
                  return (
                    <Badge key={attendee.id} variant="secondary" className="flex items-center gap-1">
                      <Avatar className="h-5 w-5">
                        {attendee.avatar && <AvatarImage src={attendee.avatar} alt={attendee.name} />}
                        <AvatarFallback className="text-xs">
                          {attendee.name.split(" ").map((n: string) => n[0]).join("").toUpperCase()}
                        </AvatarFallback>
                      </Avatar>
                      <span>{attendee.name}</span>
                      <Button 
                        type="button" 
                        variant="ghost" 
                        size="sm" 
                        className="h-4 w-4 p-0 ml-1"
                        onClick={() => {
                          handleChange(
                            "attendees", 
                            (event.attendees || []).filter(id => id !== attendee.id)
                          )
                        }}
                      >
                        <X className="h-3 w-3" />
                      </Button>
                    </Badge>
                  )
                })}
              </div>
              
              <Popover open={attendeeDropdownOpen} onOpenChange={setAttendeeDropdownOpen}>
                <PopoverTrigger asChild>
                  <Button 
                    variant="outline" 
                    role="combobox" 
                    aria-expanded={attendeeDropdownOpen}
                    className="w-full justify-between"
                  >
                    Add attendees
                  </Button>
                </PopoverTrigger>
                <PopoverContent className="w-full p-0" align="start">
                  <Command>
                    <CommandInput placeholder="Search team members..." />
                    <CommandList>
                      <CommandEmpty>No results found.</CommandEmpty>
                      <CommandGroup>
                        <ScrollArea className="h-60">
                          {teamMembers
                            .filter(member => !(event.attendees || []).includes(member.id))
                            .map(member => (
                              <CommandItem
                                key={member.id}
                                value={member.name}
                                onSelect={() => {
                                  handleChange(
                                    "attendees", 
                                    [...(event.attendees || []), member.id]
                                  )
                                  setAttendeeDropdownOpen(false)
                                }}
                              >
                                <div className="flex items-center gap-2">
                                  <Avatar className="h-6 w-6">
                                    {member.avatar && <AvatarImage src={member.avatar} alt={member.name} />}
                                    <AvatarFallback>
                                      {member.name.split(" ").map((n: string) => n[0]).join("").toUpperCase()}
                                    </AvatarFallback>
                                  </Avatar>
                                  <span>{member.name}</span>
                                </div>
                              </CommandItem>
                            ))}
                        </ScrollArea>
                      </CommandGroup>
                    </CommandList>
                  </Command>
                </PopoverContent>
              </Popover>
            </div>
          )}
        </div>

        <DialogFooter className="flex justify-between">
          <Button variant="outline" onClick={onClose}>
            Cancel
          </Button>
          <Button onClick={handleSubmit}>
            {isEditing ? "Update Event" : "Add Event"}
          </Button>
        </DialogFooter>
      </DialogContent>
    </Dialog>
  )
}
